import telebot
from telebot import types
import sqlite3
import os
from datetime import datetime
import hashlib

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = '7977985505:AAFBX8fS6X8nE2Vg7bJ1elajMWotQSmr1vU'
DATABASE_NAME = 'university_bot.db'

bot = telebot.TeleBot(BOT_TOKEN)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_id INTEGER UNIQUE,
        full_name TEXT,
        role TEXT CHECK(role IN ('student', 'teacher', 'abituirent')),
        group_name TEXT,
        register_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS schedule (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        group_name TEXT,
        day TEXT,
        time TEXT,
        subject TEXT,
        teacher TEXT,
        classroom TEXT
    )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞–Ω–∏–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS assignments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        group_name TEXT,
        subject TEXT,
        task_text TEXT,
        deadline TEXT,
        teacher TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')

    conn.commit()
    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_user_registered(telegram_id):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE telegram_id = ?', (telegram_id,))
    user = cursor.fetchone()
    conn.close()
    return user is not None

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(telegram_id, full_name, role, group_name=None):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('''
    INSERT INTO users (telegram_id, full_name, role, group_name)
    VALUES (?, ?, ?, ?)
    ''', (telegram_id, full_name, role, group_name))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def get_schedule(group_name, day=None):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    if day:
        cursor.execute('''
        SELECT * FROM schedule 
        WHERE group_name = ? AND day = ?
        ORDER BY time
        ''', (group_name, day))
    else:
        cursor.execute('''
        SELECT * FROM schedule 
        WHERE group_name = ?
        ORDER BY day, time
        ''', (group_name,))

    schedule = cursor.fetchall()
    conn.close()
    return schedule

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
def get_assignments(group_name, subject=None):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    if subject:
        cursor.execute('''
        SELECT * FROM assignments
        WHERE group_name = ? AND subject = ?
        ORDER BY deadline
        ''', (group_name, subject))
    else:
        cursor.execute('''
        SELECT * FROM assignments 
        WHERE group_name = ?
        ORDER BY deadline
        ''', (group_name,))

    assignments = cursor.fetchall()
    conn.close()
    return assignments

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=['start'])
def start(message):
    if is_user_registered(message.chat.id):
        show_main_menu(message.chat.id)
    else:
        bot.send_message(
            message.chat.id,
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∏–π –±–æ—Ç!\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
            reply_markup=create_role_keyboard()
        )
    user_states[message.chat.id] = {'state': 'start'}

def create_role_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton('üë®‚Äçüéì –Ø —Å—Ç—É–¥–µ–Ω—Ç'),
        types.KeyboardButton('üë®‚Äçüè´ –Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'),
        types.KeyboardButton('üë®‚Äçüíº –Ø –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç')
    )
    return markup

@bot.message_handler(
    func=lambda message: message.text in ['üë®‚Äçüéì –Ø —Å—Ç—É–¥–µ–Ω—Ç', 'üë®‚Äçüè´ –Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', 'üë®‚Äçüíº –Ø –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç'])
def process_role(message):
    role_map = {
        'üë®‚Äçüéì –Ø —Å—Ç—É–¥–µ–Ω—Ç': 'student',
        'üë®‚Äçüè´ –Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å': 'teacher',
        'üë®‚Äçüíº –Ø –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç': 'abituirent'
    }

    role = role_map[message.text]
    user_states[message.chat.id] = {'state': 'role_selected', 'role': role}

    if role == 'student':
        msg = bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        bot.register_next_step_handler(msg, lambda m: process_student_name(m, role))
    else:
        msg = bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        bot.register_next_step_handler(msg, lambda m: process_teacher_auth(m, role))

def process_student_name(message, role):
    full_name = message.text
    user_states[message.chat.id]['full_name'] = full_name
    msg = bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã:",
        reply_markup=create_back_keyboard()
    )
    bot.register_next_step_handler(msg, lambda m: process_student_group(m, role, full_name))

def process_student_group(message, role, full_name):
    if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        msg = bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        bot.register_next_step_handler(msg, lambda m: process_student_name(m, role))
        return
    
    group_name = message.text
    register_user(message.chat.id, full_name, role, group_name)
    bot.send_message(
        message.chat.id,
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–§–ò–û: {full_name}\n"
        f"–†–æ–ª—å: {role}\n"
        f"–ì—Ä—É–ø–ø–∞: {group_name}",
        reply_markup=types.ReplyKeyboardRemove()
    )
    show_main_menu(message.chat.id)

def process_teacher_auth(message, role):
    if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        start(message)
        return
    
    valid_keys = {
        'teacher': 'teacher123',
    }

    if message.text.strip() == valid_keys[role]:
        msg = bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
            reply_markup=create_back_keyboard()
        )
        bot.register_next_step_handler(msg, lambda m: process_teacher_name(m, role))
    else:
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=create_role_keyboard()
        )

def process_teacher_name(message, role):
    if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        msg = bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        bot.register_next_step_handler(msg, lambda m: process_teacher_auth(m, role))
        return
    
    full_name = message.text
    register_user(message.chat.id, full_name, role)
    bot.send_message(
        message.chat.id,
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–§–ò–û: {full_name}\n"
        f"–†–æ–ª—å: {role}",
        reply_markup=types.ReplyKeyboardRemove()
    )
    show_main_menu(message.chat.id)

def create_back_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
    return markup

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def show_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT role FROM users WHERE telegram_id = ?', (chat_id,))
    role = cursor.fetchone()[0]
    conn.close()

    if role == 'student':
        markup.add(
            types.KeyboardButton('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'),
            types.KeyboardButton('üìù –ó–∞–¥–∞–Ω–∏—è'),
            types.KeyboardButton('üìä –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å'),
            types.KeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å')
        )
    elif role == 'teacher':
        markup.add(
            types.KeyboardButton('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'),
            types.KeyboardButton('üìù –ó–∞–¥–∞–Ω–∏—è'),
            types.KeyboardButton('üë• –ì—Ä—É–ø–ø—ã'),
            types.KeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å')
        )
    else:  # abituirent
        markup.add(
            types.KeyboardButton('üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º'),
            types.KeyboardButton('üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏'),
            types.KeyboardButton('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏'),
            types.KeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã')
        )

    user_states[chat_id] = {'state': 'main_menu'}
    bot.send_message(
        chat_id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥
@bot.message_handler(func=lambda message: message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
def handle_back(message):
    chat_id = message.chat.id
    if chat_id not in user_states:
        start(message)
        return
    
    state = user_states[chat_id].get('state')
    
    if state == 'schedule_view':
        handle_schedule(message)
    elif state == 'assignments_view':
        handle_assignments(message)
    elif state == 'teacher_schedule_options':
        show_main_menu(chat_id)
    elif state == 'teacher_assignment_options':
        show_main_menu(chat_id)
    else:
        show_main_menu(chat_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@bot.message_handler(func=lambda message: message.text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
def handle_schedule(message):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT role, group_name FROM users WHERE telegram_id = ?', (message.chat.id,))
    user_data = cursor.fetchone()
    conn.close()

    role, group_name = user_data
    user_states[message.chat.id] = {'state': 'schedule_view'}

    if role == 'student':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(
            types.KeyboardButton('–°–µ–≥–æ–¥–Ω—è'),
            types.KeyboardButton('–ó–∞–≤—Ç—Ä–∞'),
            types.KeyboardButton('–ù–µ–¥–µ–ª—è'),
            types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
        )
        bot.send_message(
            message.chat.id,
            f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}:",
            reply_markup=markup
        )
    else:
        show_teacher_schedule_options(message.chat.id)

def show_teacher_schedule_options(chat_id):
    user_states[chat_id] = {'state': 'teacher_schedule_options'}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton('–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'),
        types.KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã'),
        types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
    )
    bot.send_message(
        chat_id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞–Ω–∏–π
@bot.message_handler(func=lambda message: message.text == 'üìù –ó–∞–¥–∞–Ω–∏—è')
def handle_assignments(message):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT role, group_name FROM users WHERE telegram_id = ?', (message.chat.id,))
    user_data = cursor.fetchone()
    conn.close()

    role, group_name = user_data
    user_states[message.chat.id] = {'state': 'assignments_view'}

    if role == 'student':
        assignments = get_assignments(group_name)
        if assignments:
            response = "üìö –í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:\n\n"
            for task in assignments:
                response += (f"üìå {task[2]} ({task[1]})\n"
                           f"üìù {task[3]}\n"
                           f"‚è∞ –î–æ {task[4]}\n"
                           f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {task[5]}\n\n")
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
            bot.send_message(message.chat.id, response, reply_markup=markup)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π.", reply_markup=markup)
    else:
        show_teacher_assignment_options(message.chat.id)

def show_teacher_assignment_options(chat_id):
    user_states[chat_id] = {'state': 'teacher_assignment_options'}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton('–ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è'),
        types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ'),
        types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
    )
    bot.send_message(
        chat_id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏:",
        reply_markup=markup
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    if not os.path.exists(DATABASE_NAME):
        init_db()
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)