import telebot
from telebot import types
import sqlite3
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='university_bot.log',
    encoding='utf-8'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('7303895887:AAGWZ83wBKfnAeIT3GrRH1A49E62kAcZTJU')

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞
STUDENT_KEY = "ITHub2025"
TEACHER_KEY = "IThubTeacher2025"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = sqlite3.connect('university.db', check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER UNIQUE NOT NULL,
            full_name TEXT,
            role TEXT NOT NULL,
            group_name TEXT,
            registration_date TEXT NOT NULL
        )
        ''')

        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise
    finally:
        conn.close()


# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
def get_user_info(chat_id):
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users WHERE chat_id = ?', (chat_id,))
        return cursor.fetchone()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None
    finally:
        conn.close()


def save_user(chat_id, role, full_name=None, group_name=None):
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''
        INSERT OR REPLACE INTO users 
        (chat_id, role, full_name, group_name, registration_date)
        VALUES (?, ?, ?, ?, ?)
        ''', (
            chat_id, role, full_name, group_name,
            datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        ))
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        raise
    finally:
        conn.close()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_role_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton('üéì –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç'),
        types.KeyboardButton('üë®üéì –°—Ç—É–¥–µ–Ω—Ç'),
        types.KeyboardButton('üë®üè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å')
    )
    return markup


def create_back_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
    return markup


def create_main_menu(role):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    if role == 'abiturient':
        buttons = ['üèõ –§–∞–∫—É–ª—å—Ç–µ—Ç—ã', 'üìù –ü—Ä–∞–≤–∏–ª–∞', 'üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã']
    elif role == 'student':
        buttons = ['üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã', 'üìù –ó–∞–¥–∞–Ω–∏—è', 'üìä –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å', 'üë§ –ü—Ä–æ—Ñ–∏–ª—å']
    elif role == 'teacher':
        buttons = ['üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üë• –ì—Ä—É–ø–ø—ã', 'üìù –ó–∞–¥–∞–Ω–∏—è', 'üìä –ñ—É—Ä–Ω–∞–ª', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']

    markup.add(*[types.KeyboardButton(btn) for btn in buttons])
    return markup


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start', 'help'])
def start_handler(message):
    try:
        chat_id = message.chat.id
        user_info = get_user_info(chat_id)

        if user_info:
            show_main_menu(chat_id, user_info['role'])
        else:
            bot.send_message(
                chat_id,
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∏–π –±–æ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:",
                reply_markup=create_role_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(func=lambda m: m.text in ['üéì –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç', 'üë®üéì –°—Ç—É–¥–µ–Ω—Ç', 'üë®üè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'])
def role_selection_handler(message):
    try:
        chat_id = message.chat.id
        role_map = {
            'üéì –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç': 'abiturient',
            'üë®üéì –°—Ç—É–¥–µ–Ω—Ç': 'student',
            'üë®üè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å': 'teacher'
        }

        role = role_map[message.text]
        user_states[chat_id] = {'role': role}

        if role == 'abiturient':
            save_user(chat_id, role)
            show_main_menu(chat_id, role)
        else:
            msg = bot.send_message(
                chat_id,
                "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:",
                reply_markup=create_back_keyboard()
            )
            bot.register_next_step_handler(msg, process_access_key)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def process_access_key(message):
    try:
        chat_id = message.chat.id
        if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
            return start_handler(message)

        role = user_states[chat_id]['role']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
        if (role == 'student' and message.text == STUDENT_KEY) or \
                (role == 'teacher' and message.text == TEACHER_KEY):

            msg = bot.send_message(
                chat_id,
                "‚úÖ –ö–ª—é—á –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
                reply_markup=create_back_keyboard()
            )

            if role == 'student':
                bot.register_next_step_handler(msg, process_student_full_name)
            else:
                bot.register_next_step_handler(msg, process_teacher_full_name)
        else:
            msg = bot.send_message(
                chat_id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=create_back_keyboard()
            )
            bot.register_next_step_handler(msg, process_access_key)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª—é—á–∞: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def process_student_full_name(message):
    try:
        chat_id = message.chat.id
        if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
            msg = bot.send_message(
                chat_id,
                "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:",
                reply_markup=create_back_keyboard()
            )
            bot.register_next_step_handler(msg, process_access_key)
            return

        if len(message.text.split()) < 2:
            msg = bot.send_message(
                chat_id,
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):",
                reply_markup=create_back_keyboard()
            )
            bot.register_next_step_handler(msg, process_student_full_name)
            return

        user_states[chat_id]['full_name'] = message.text

        msg = bot.send_message(
            chat_id,
            "üìå –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–í–¢-2023):",
            reply_markup=create_back_keyboard()
        )
        bot.register_next_step_handler(msg, process_student_group)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def process_student_group(message):
    try:
        chat_id = message.chat.id
        if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
            msg = bot.send_message(
                chat_id,
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é:",
                reply_markup=create_back_keyboard()
            )
            bot.register_next_step_handler(msg, process_student_full_name)
            return

        save_user(
            chat_id,
            'student',
            full_name=user_states[chat_id]['full_name'],
            group_name=message.text
        )

        bot.send_message(
            chat_id,
            f"üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, {user_states[chat_id]['full_name']}!",
            reply_markup=types.ReplyKeyboardRemove()
        )
        show_main_menu(chat_id, 'student')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def process_teacher_full_name(message):
    try:
        chat_id = message.chat.id
        if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
            msg = bot.send_message(
                chat_id,
                "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:",
                reply_markup=create_back_keyboard()
            )
            bot.register_next_step_handler(msg, process_access_key)
            return

        if len(message.text.split()) < 2:
            msg = bot.send_message(
                chat_id,
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ü–µ—Ç—Ä–æ–≤–∞ –ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–Ω–∞):",
                reply_markup=create_back_keyboard()
            )
            bot.register_next_step_handler(msg, process_teacher_full_name)
            return

        save_user(
            chat_id,
            'teacher',
            full_name=message.text
        )

        bot.send_message(
            chat_id,
            f"üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, {message.text}!",
            reply_markup=types.ReplyKeyboardRemove()
        )
        show_main_menu(chat_id, 'teacher')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
@bot.message_handler(func=lambda m: get_user_info(m.chat.id) and
                                    get_user_info(m.chat.id)['role'] == 'student' and
                                    m.text in ['üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã', 'üìù –ó–∞–¥–∞–Ω–∏—è', 'üìä –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å',
                                               'üë§ –ü—Ä–æ—Ñ–∏–ª—å'])
def student_features_handler(message):
    try:
        chat_id = message.chat.id
        user_info = get_user_info(chat_id)

        if message.text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
            bot.send_message(chat_id, "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            bot.send_message(chat_id,
                             "üìÖ –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n–ü–Ω: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ 10:00-11:30\n–í—Ç: –§–∏–∑–∏–∫–∞ 9:00-10:30\n–°—Ä: –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ 11:00-12:30")

        elif message.text == 'üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã':
            bot.send_message(chat_id, "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...")
            bot.send_message(chat_id,
                             "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n1. –õ–µ–∫—Ü–∏—è –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ\n2. –ü—Ä–∞–∫—Ç–∏–∫—É–º –ø–æ —Ñ–∏–∑–∏–∫–µ\n3. –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é")

        elif message.text == 'üìù –ó–∞–¥–∞–Ω–∏—è':
            bot.send_message(chat_id, "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π...")
            bot.send_message(chat_id,
                             "üìù –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n1. –†–µ—Ñ–µ—Ä–∞—Ç –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ (–¥–æ 15.05)\n2. –ó–∞–¥–∞—á–∏ –ø–æ —Ñ–∏–∑–∏–∫–µ (–¥–æ 20.05)")

        elif message.text == 'üìä –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å':
            bot.send_message(chat_id, "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏...")
            bot.send_message(chat_id, "üìä –í–∞—à–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å:\n–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: 4.5\n–§–∏–∑–∏–∫–∞: 5.0\n–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: 4.8")

        elif message.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
            response = f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n–§–ò–û: {user_info['full_name']}\n–ì—Ä—É–ø–ø–∞: {user_info['group_name']}\n–†–æ–ª—å: –°—Ç—É–¥–µ–Ω—Ç"
            bot.send_message(chat_id, response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(func=lambda m: get_user_info(m.chat.id) and
                                    get_user_info(m.chat.id)['role'] == 'teacher' and
                                    m.text in ['üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üë• –ì—Ä—É–ø–ø—ã', 'üìù –ó–∞–¥–∞–Ω–∏—è', 'üìä –ñ—É—Ä–Ω–∞–ª', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'])
def teacher_features_handler(message):
    try:
        chat_id = message.chat.id
        user_info = get_user_info(chat_id)

        if message.text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
            bot.send_message(chat_id, "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
            bot.send_message(chat_id,
                             "üìÖ –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:\n–ü–Ω: –õ–µ–∫—Ü–∏—è –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ (–ò–í–¢-2023) 10:00-11:30\n–í—Ç: –ü—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ —Ñ–∏–∑–∏–∫–µ (–ò–í–¢-2023) 9:00-10:30")

        elif message.text == 'üë• –ì—Ä—É–ø–ø—ã':
            bot.send_message(chat_id, "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø...")
            bot.send_message(chat_id, "üë• –í–∞—à–∏ —É—á–µ–±–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n1. –ò–í–¢-2023\n2. –ò–í–¢-2022")

        elif message.text == 'üìù –ó–∞–¥–∞–Ω–∏—è':
            bot.send_message(chat_id, "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π...")
            bot.send_message(chat_id, "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏:\n1. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ")

        elif message.text == 'üìä –ñ—É—Ä–Ω–∞–ª':
            bot.send_message(chat_id, "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∂—É—Ä–Ω–∞–ª–∞...")
            bot.send_message(chat_id,
                             "üìä –ñ—É—Ä–Ω–∞–ª —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏:\n–ì—Ä—É–ø–ø–∞ –ò–í–¢-2023:\n- –ò–≤–∞–Ω–æ–≤ –ò.–ò.: 4.5\n- –ü–µ—Ç—Ä–æ–≤ –ü.–ü.: 5.0")

        elif message.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
            bot.send_message(chat_id, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:\n1. –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n2. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤
@bot.message_handler(func=lambda m: get_user_info(m.chat.id) and
                                    get_user_info(m.chat.id)['role'] == 'abiturient' and
                                    m.text in ['üèõ –§–∞–∫—É–ª—å—Ç–µ—Ç—ã', 'üìù –ü—Ä–∞–≤–∏–ª–∞', 'üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã'])
def abiturient_features_handler(message):
    try:
        chat_id = message.chat.id

        if message.text == 'üèõ –§–∞–∫—É–ª—å—Ç–µ—Ç—ã':
            response = "üèõ –§–∞–∫—É–ª—å—Ç–µ—Ç—ã –Ω–∞—à–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞:\n1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π\n2. –ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π\n3. –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π"
            bot.send_message(chat_id, response)

        elif message.text == 'üìù –ü—Ä–∞–≤–∏–ª–∞':
            response = "üìù –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–µ–º–∞:\n1. –ü–æ–¥–∞—á–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–æ 20 –∏—é–ª—è\n2. –í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è —Å 25 –∏—é–ª—è\n3. –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö - 10 –∞–≤–≥—É—Å—Ç–∞"
            bot.send_message(chat_id, response)

        elif message.text == 'üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è':
            response = "üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n- –î–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π: 15 –º–∞—è\n- –û–ª–∏–º–ø–∏–∞–¥–∞ –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤: 20 –∏—é–Ω—è"
            bot.send_message(chat_id, response)

        elif message.text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã':
            response = "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏:\n–¢–µ–ª–µ—Ñ–æ–Ω: +7 (123) 456-78-90\nEmail: admission@university.edu\n–ê–¥—Ä–µ—Å: —É–ª. –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∞—è, 1"
            bot.send_message(chat_id, response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def show_main_menu(chat_id, role):
    try:
        greetings = {
            'abiturient': "üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç!",
            'student': f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {get_user_info(chat_id)['full_name']}!",
            'teacher': f"üë®üè´ –î–æ–±—Ä—ã–π –¥–µ–Ω—å, {get_user_info(chat_id)['full_name']}!"
        }

        bot.send_message(
            chat_id,
            greetings.get(role, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"),
            reply_markup=create_main_menu(role)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é: {e}")
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(func=lambda m: True)
def unknown_handler(message):
    bot.send_message(
        message.chat.id,
        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=create_back_keyboard() if get_user_info(message.chat.id) else None
    )


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    init_db()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()