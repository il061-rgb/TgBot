import telebot
from telebot import types
import sqlite3
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='bot.log'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('7977985505:AAFBX8fS6X8nE2Vg7bJ1elajMWotQSmr1vU')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = None
    try:
        conn = sqlite3.connect('university.db', check_same_thread=False)
        conn.row_factory = sqlite3.Row
        return conn
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        if conn:
            conn.close()
        raise

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            chat_id INTEGER PRIMARY KEY,
            full_name TEXT,
            role TEXT NOT NULL,
            group_name TEXT,
            is_verified BOOLEAN DEFAULT FALSE,
            registration_date TEXT
        )
        ''')
        
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS access_keys (
            key TEXT PRIMARY KEY,
            role TEXT NOT NULL,
            is_used BOOLEAN DEFAULT FALSE
        )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        cursor.execute("SELECT 1 FROM access_keys WHERE key = 'student123'")
        if not cursor.fetchone():
            cursor.execute("INSERT INTO access_keys (key, role) VALUES (?, ?)", 
                         ('student123', 'student'))
        
        cursor.execute("SELECT 1 FROM access_keys WHERE key = 'teacher456'")
        if not cursor.fetchone():
            cursor.execute("INSERT INTO access_keys (key, role) VALUES (?, ?)", 
                         ('teacher456', 'teacher'))
        
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise
    finally:
        if conn:
            conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
def get_user_info(chat_id):
    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''
        SELECT role, group_name, full_name, is_verified 
        FROM users 
        WHERE chat_id = ?
        ''', (chat_id,))
        return cursor.fetchone()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None
    finally:
        if conn:
            conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞
def check_and_use_key(key, role):
    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute('''
        SELECT 1 FROM access_keys 
        WHERE key = ? AND role = ? AND is_used = FALSE
        ''', (key, role))
        
        if cursor.fetchone():
            cursor.execute('''
            UPDATE access_keys 
            SET is_used = TRUE 
            WHERE key = ?
            ''', (key,))
            conn.commit()
            return True
        return False
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–∞: {e}")
        return False
    finally:
        if conn:
            conn.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user(chat_id, role, full_name=None, group_name=None, is_verified=True):
    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute('''
        INSERT OR REPLACE INTO users 
        (chat_id, role, full_name, group_name, is_verified, registration_date)
        VALUES (?, ?, ?, ?, ?, ?)
        ''', (
            chat_id, 
            role, 
            full_name, 
            group_name, 
            is_verified,
            datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        ))
        
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        raise
    finally:
        if conn:
            conn.close()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_role_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton('üë®üéì –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç'),
        types.KeyboardButton('üë®üéì –°—Ç—É–¥–µ–Ω—Ç'),
        types.KeyboardButton('üë®üè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å')
    )
    return markup

def create_back_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
    return markup

def create_main_menu(role, full_name=""):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    
    if role == 'abituirent':
        buttons = [
            'üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞—Ö',
            'üìù –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–µ–º–∞',
            'üìÖ –î–Ω–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π',
            'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏'
        ]
    elif role == 'student':
        buttons = [
            'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
            'üìù –ó–∞–¥–∞–Ω–∏—è',
            'üìä –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å',
            '‚ÑπÔ∏è –ü–æ–º–æ—â—å'
        ]
    elif role == 'teacher':
        buttons = [
            'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
            'üìù –ó–∞–¥–∞–Ω–∏—è',
            'üë• –ì—Ä—É–ø–ø—ã',
            'üìä –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å',
            '‚ÑπÔ∏è –ü–æ–º–æ—â—å'
        ]
    
    markup.add(*[types.KeyboardButton(btn) for btn in buttons])
    markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(commands=['start'])
def start_handler(message):
    try:
        chat_id = message.chat.id
        bot.send_message(
            chat_id,
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!",
            reply_markup=create_role_keyboard()
        )
        user_states[chat_id] = {'state': 'selecting_role'}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda m: m.text in ['üë®üéì –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç', 'üë®üéì –°—Ç—É–¥–µ–Ω—Ç', 'üë®üè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'])
def role_selection_handler(message):
    try:
        chat_id = message.chat.id
        role_map = {
            'üë®üéì –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç': 'abituirent',
            'üë®üéì –°—Ç—É–¥–µ–Ω—Ç': 'student',
            'üë®üè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å': 'teacher'
        }
        
        role = role_map[message.text]
        user_states[chat_id] = {'role': role}
        
        if role == 'abituirent':
            save_user(chat_id, role)
            show_abituirent_menu(chat_id)
        else:
            msg = bot.send_message(
                chat_id,
                "–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:",
                reply_markup=create_back_keyboard()
            )
            bot.register_next_step_handler(msg, process_access_key)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def process_access_key(message):
    try:
        chat_id = message.chat.id
        
        if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
            return start_handler(message)
        
        role = user_states.get(chat_id, {}).get('role')
        if not role:
            return start_handler(message)
        
        if check_and_use_key(message.text, role):
            save_user(chat_id, role, is_verified=True)
            
            if role == 'student':
                msg = bot.send_message(
                    chat_id,
                    "–ö–ª—é—á –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
                    reply_markup=create_back_keyboard()
                )
                bot.register_next_step_handler(msg, process_student_full_name)
            else:
                msg = bot.send_message(
                    chat_id,
                    "–ö–ª—é—á –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
                    reply_markup=create_back_keyboard()
                )
                bot.register_next_step_handler(msg, process_teacher_full_name)
        else:
            msg = bot.send_message(
                chat_id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á:",
                reply_markup=create_back_keyboard()
            )
            bot.register_next_step_handler(msg, process_access_key)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª—é—á–∞: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def process_student_full_name(message):
    try:
        chat_id = message.chat.id
        
        if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
            return start_handler(message)
        
        user_states[chat_id]['full_name'] = message.text
        
        msg = bot.send_message(
            chat_id,
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã:",
            reply_markup=create_back_keyboard()
        )
        bot.register_next_step_handler(msg, process_student_group)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def process_student_group(message):
    try:
        chat_id = message.chat.id
        
        if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
            return start_handler(message)
        
        save_user(
            chat_id,
            'student',
            full_name=user_states[chat_id]['full_name'],
            group_name=message.text,
            is_verified=True
        )
        
        bot.send_message(
            chat_id,
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            reply_markup=types.ReplyKeyboardRemove()
        )
        show_main_menu(chat_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def process_teacher_full_name(message):
    try:
        chat_id = message.chat.id
        
        if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
            return start_handler(message)
        
        save_user(
            chat_id,
            'teacher',
            full_name=message.text,
            is_verified=True
        )
        
        bot.send_message(
            chat_id,
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            reply_markup=types.ReplyKeyboardRemove()
        )
        show_main_menu(chat_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@bot.message_handler(func=lambda m: m.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
def back_handler(message):
    try:
        chat_id = message.chat.id
        user_info = get_user_info(chat_id)
        
        if not user_info:
            return start_handler(message)
        
        show_main_menu(chat_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ú–µ–Ω—é –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
def show_main_menu(chat_id):
    try:
        user_info = get_user_info(chat_id)
        if not user_info:
            return start_handler(chat_id)
        
        role = user_info['role']
        full_name = user_info['full_name'] or ""
        
        if role == 'abituirent':
            text = "–ú—ã —Ä–∞–¥—ã –Ω–æ–≤—ã–º —É—á–∞—â–∏–º—Å—è. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:"
        elif role == 'student':
            text = f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞ {full_name}"
        else:
            text = f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {full_name}"
        
        bot.send_message(
            chat_id,
            text,
            reply_markup=create_main_menu(role, full_name)
        )
        user_states[chat_id] = {'state': 'main_menu'}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def show_abituirent_menu(chat_id):
    try:
        bot.send_message(
            chat_id,
            "–ú—ã —Ä–∞–¥—ã –Ω–æ–≤—ã–º —É—á–∞—â–∏–º—Å—è. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:",
            reply_markup=create_main_menu('abituirent')
        )
        user_states[chat_id] = {'state': 'abituirent_menu'}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

ABITURIENT_INFO = {
    'üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞—Ö': """
üìö <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞—Ö</b>:

1. <b>–§–∞–∫—É–ª—å—Ç–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π</b>
   - –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –Ω–∞—É–∫–∏
   - –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è
   - –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

2. <b>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç</b>
   - –§–∏–Ω–∞–Ω—Å—ã –∏ –∫—Ä–µ–¥–∏—Ç
   - –ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–π —É—á–µ—Ç
   - –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç

3. <b>–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç</b>
   - –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è
   - –§–∏–ª–æ–ª–æ–≥–∏—è
   - –ò—Å—Ç–æ—Ä–∏—è
    """,
    'üìù –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–µ–º–∞': """
üìù <b>–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–µ–º–∞</b>:

1. –ü–æ–¥–∞—á–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: —Å 1 –∏—é–Ω—è –ø–æ 15 –∏—é–ª—è
2. –í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è: —Å 20 –∏—é–ª—è –ø–æ 5 –∞–≤–≥—É—Å—Ç–∞
3. –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:
   - –ü–∞—Å–ø–æ—Ä—Ç
   - –ê—Ç—Ç–µ—Å—Ç–∞—Ç
   - 4 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ 3x4
   - –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞
    """,
    'üìÖ –î–Ω–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π': """
üìÖ <b>–î–Ω–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π</b>:

- 15 –∞–ø—Ä–µ–ª—è 2024, 12:00
- 20 –º–∞—è 2024, 12:00
- 10 –∏—é–Ω—è 2024, 12:00

–ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∞—è, –¥.1, –∞—É–¥. 101
    """,
    'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏': """
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏</b>:

–¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67
Email: admission@university.ru
–ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∞—è, –¥.1, –∫–∞–±. 205

–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç —Å 9:00 –¥–æ 18:00
    """
}

@bot.message_handler(func=lambda m: get_user_info(m.chat.id) and 
                   get_user_info(m.chat.id)['role'] == 'abituirent' and
                   m.text in ABITURIENT_INFO.keys())
def abituirent_info_handler(message):
    try:
        bot.send_message(
            message.chat.id,
            ABITURIENT_INFO[message.text],
            parse_mode='HTML',
            reply_markup=create_back_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda m: True)
def unknown_handler(message):
    bot.send_message(
        message.chat.id,
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=create_back_keyboard()
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
if __name__ == '__main__':
    try:
        init_db()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        bot.infinity_polling()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")